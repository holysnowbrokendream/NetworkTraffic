version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: networktraffic-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: network_traffic
      MYSQL_USER: nwt_user
      MYSQL_PASSWORD: 123456
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - networktraffic-network
    restart: unless-stopped

  backend:
    image: networktraffic-backend:latest
    container_name: networktraffic-backend
    environment:
      # 动态配置，支持运行时覆盖
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0,*}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://localhost:23456,http://0.0.0.0:23456}
      - DJANGO_SETTINGS_MODULE=backend.settings
      - HOST_IP=${HOST_IP:-127.0.0.1}
      # 数据库配置
      - DB_NAME=${DB_NAME:-network_traffic}
      - DB_USER=${DB_USER:-nwt_user}
      - DB_PASSWORD=${DB_PASSWORD:-123456}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
    ports:
      - "8000:8000"
    volumes:
      # 挂载配置文件，允许客户修改
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./HTTP/media:/app/media
      - ./HTTP/staticfiles:/app/staticfiles
    depends_on:
      - mysql
    networks:
      - networktraffic-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Configuring for host IP: $HOST_IP' &&
        python runtime-config.py &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  frontend:
    image: networktraffic-frontend:latest
    container_name: networktraffic-frontend
    ports:
      - "23456:80"
    depends_on:
      - backend
    networks:
      - networktraffic-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: networktraffic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - networktraffic-network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  networktraffic-network:
    driver: bridge
